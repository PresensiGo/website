/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as AuthenticatedMajorsIndexRouteImport } from './routes/_authenticated/majors/index'
import { Route as AuthenticatedBatchesIndexRouteImport } from './routes/_authenticated/batches/index'

const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedMajorsIndexRoute =
  AuthenticatedMajorsIndexRouteImport.update({
    id: '/majors/',
    path: '/majors/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedBatchesIndexRoute =
  AuthenticatedBatchesIndexRouteImport.update({
    id: '/batches/',
    path: '/batches/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/': typeof AuthenticatedIndexRoute
  '/batches': typeof AuthenticatedBatchesIndexRoute
  '/majors': typeof AuthenticatedMajorsIndexRoute
}
export interface FileRoutesByTo {
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/': typeof AuthenticatedIndexRoute
  '/batches': typeof AuthenticatedBatchesIndexRoute
  '/majors': typeof AuthenticatedMajorsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/batches/': typeof AuthenticatedBatchesIndexRoute
  '/_authenticated/majors/': typeof AuthenticatedMajorsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/auth/login' | '/auth/register' | '/' | '/batches' | '/majors'
  fileRoutesByTo: FileRoutesByTo
  to: '/auth/login' | '/auth/register' | '/' | '/batches' | '/majors'
  id:
    | '__root__'
    | '/_authenticated'
    | '/auth/login'
    | '/auth/register'
    | '/_authenticated/'
    | '/_authenticated/batches/'
    | '/_authenticated/majors/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/majors/': {
      id: '/_authenticated/majors/'
      path: '/majors'
      fullPath: '/majors'
      preLoaderRoute: typeof AuthenticatedMajorsIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/batches/': {
      id: '/_authenticated/batches/'
      path: '/batches'
      fullPath: '/batches'
      preLoaderRoute: typeof AuthenticatedBatchesIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedBatchesIndexRoute: typeof AuthenticatedBatchesIndexRoute
  AuthenticatedMajorsIndexRoute: typeof AuthenticatedMajorsIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedBatchesIndexRoute: AuthenticatedBatchesIndexRoute,
  AuthenticatedMajorsIndexRoute: AuthenticatedMajorsIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
